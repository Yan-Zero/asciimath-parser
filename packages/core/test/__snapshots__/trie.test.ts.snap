// Vitest Snapshot v1

exports[`asciimath matrix > should build the symbol trie 1`] = `
[
  {
    "current": 3,
    "isKeyWord": true,
    "tex": "\\\\sum",
    "type": "Const",
    "value": "sum",
  },
  {
    "current": 4,
    "isKeyWord": true,
    "tex": "_{ $1 }",
    "type": "OperatorSup",
    "value": "_",
  },
  {
    "current": 5,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 6,
    "isKeyWord": false,
    "tex": "n",
    "type": "StringLiteral",
    "value": "n",
  },
  {
    "current": 7,
    "isKeyWord": false,
    "tex": "=",
    "type": "StringLiteral",
    "value": "=",
  },
  {
    "current": 8,
    "isKeyWord": false,
    "tex": "1",
    "type": "NumberLiteral",
    "value": "1",
  },
  {
    "current": 9,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
  {
    "current": 10,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 11,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 12,
    "isKeyWord": true,
    "tex": "{+$1 }",
    "type": "OperatorMinus",
    "value": "+",
  },
  {
    "current": 14,
    "isKeyWord": true,
    "tex": "\\\\infty",
    "type": "Const",
    "value": "oo",
  },
  {
    "current": 15,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
  {
    "current": 16,
    "isKeyWord": false,
    "tex": "1",
    "type": "NumberLiteral",
    "value": "1",
  },
  {
    "current": 17,
    "isKeyWord": true,
    "tex": "\\\\frac{ $1 }{ $2 }",
    "type": "OperatorAOB",
    "value": "/",
  },
  {
    "current": 18,
    "isKeyWord": false,
    "tex": "n",
    "type": "StringLiteral",
    "value": "n",
  },
  {
    "current": 19,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 20,
    "isKeyWord": false,
    "tex": "2",
    "type": "NumberLiteral",
    "value": "2",
  },
  {
    "current": 21,
    "isKeyWord": true,
    "tex": "&",
    "type": "Align",
    "value": "&",
  },
  {
    "current": 22,
    "isKeyWord": false,
    "tex": "=",
    "type": "StringLiteral",
    "value": "=",
  },
  {
    "current": 24,
    "isKeyWord": true,
    "tex": "\\\\pi",
    "type": "Const",
    "value": "pi",
  },
  {
    "current": 25,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 26,
    "isKeyWord": false,
    "tex": "2",
    "type": "NumberLiteral",
    "value": "2",
  },
  {
    "current": 27,
    "isKeyWord": true,
    "tex": "\\\\frac{ $1 }{ $2 }",
    "type": "OperatorAOB",
    "value": "/",
  },
  {
    "current": 28,
    "isKeyWord": false,
    "tex": "6",
    "type": "NumberLiteral",
    "value": "6",
  },
  {
    "current": 30,
    "isKeyWord": true,
    "tex": "\\\\\\\\",
    "type": "Align",
    "value": "

",
  },
  {
    "current": 31,
    "isKeyWord": false,
    "tex": "f",
    "type": "StringLiteral",
    "value": "f",
  },
  {
    "current": 32,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 33,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 34,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
  {
    "current": 35,
    "isKeyWord": true,
    "tex": "&",
    "type": "Align",
    "value": "&",
  },
  {
    "current": 36,
    "isKeyWord": false,
    "tex": "=",
    "type": "StringLiteral",
    "value": "=",
  },
  {
    "current": 37,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 38,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 39,
    "isKeyWord": false,
    "tex": "2",
    "type": "NumberLiteral",
    "value": "2",
  },
]
`;

exports[`asciimath matrix > should build the symbol trie 2`] = `
[
  {
    "current": 1,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 5,
    "isKeyWord": true,
    "tex": "\\\\mapsto",
    "type": "Const",
    "value": "|->",
  },
  {
    "current": 9,
    "isKeyWord": false,
    "tex": "e",
    "type": "Text",
    "value": "e",
  },
  {
    "current": 10,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 11,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 12,
    "isKeyWord": false,
    "tex": "2",
    "type": "NumberLiteral",
    "value": "2",
  },
  {
    "current": 14,
    "isKeyWord": true,
    "tex": "\\\\pi",
    "type": "Const",
    "value": "pi",
  },
  {
    "current": 18,
    "isKeyWord": false,
    "tex": "i",
    "type": "Text",
    "value": "i",
  },
  {
    "current": 20,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 21,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
]
`;

exports[`asciimath matrix > should build the symbol trie 3`] = `
[
  {
    "current": 3,
    "isKeyWord": false,
    "tex": "e",
    "type": "Text",
    "value": "e",
  },
  {
    "current": 4,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 5,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 8,
    "isKeyWord": false,
    "tex": "i",
    "type": "Text",
    "value": "i",
  },
  {
    "current": 11,
    "isKeyWord": true,
    "tex": "\\\\pi",
    "type": "Const",
    "value": "pi",
  },
  {
    "current": 12,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
]
`;

exports[`asciimath matrix > should tokenize a divided matrix 1`] = `
[
  {
    "current": 1,
    "isKeyWord": true,
    "tex": "[",
    "type": "LParen",
    "value": "[",
  },
  {
    "current": 9,
    "isKeyWord": false,
    "tex": "a",
    "type": "StringLiteral",
    "value": "a",
  },
  {
    "current": 10,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 12,
    "isKeyWord": false,
    "tex": "b",
    "type": "StringLiteral",
    "value": "b",
  },
  {
    "current": 13,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 15,
    "isKeyWord": true,
    "tex": "|",
    "type": "Paren",
    "value": "|",
  },
  {
    "current": 16,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 18,
    "isKeyWord": false,
    "tex": "c",
    "type": "StringLiteral",
    "value": "c",
  },
  {
    "current": 19,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 27,
    "isKeyWord": false,
    "tex": "d",
    "type": "StringLiteral",
    "value": "d",
  },
  {
    "current": 28,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 30,
    "isKeyWord": false,
    "tex": "e",
    "type": "StringLiteral",
    "value": "e",
  },
  {
    "current": 31,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 33,
    "isKeyWord": true,
    "tex": "|",
    "type": "Paren",
    "value": "|",
  },
  {
    "current": 34,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 36,
    "isKeyWord": false,
    "tex": "f",
    "type": "StringLiteral",
    "value": "f",
  },
  {
    "current": 37,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 45,
    "isKeyWord": false,
    "tex": "g",
    "type": "StringLiteral",
    "value": "g",
  },
  {
    "current": 46,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 48,
    "isKeyWord": true,
    "tex": "|",
    "type": "Paren",
    "value": "|",
  },
  {
    "current": 50,
    "isKeyWord": false,
    "tex": "h",
    "type": "StringLiteral",
    "value": "h",
  },
  {
    "current": 51,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 53,
    "isKeyWord": false,
    "tex": "i",
    "type": "StringLiteral",
    "value": "i",
  },
  {
    "current": 59,
    "isKeyWord": true,
    "tex": "]",
    "type": "RParen",
    "value": "]",
  },
]
`;

exports[`asciimath matrix > should tokenize a matrix 1`] = `
[
  {
    "current": 1,
    "isKeyWord": true,
    "tex": "[",
    "type": "LParen",
    "value": "[",
  },
  {
    "current": 2,
    "isKeyWord": false,
    "tex": "a",
    "type": "StringLiteral",
    "value": "a",
  },
  {
    "current": 3,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 4,
    "isKeyWord": false,
    "tex": "b",
    "type": "StringLiteral",
    "value": "b",
  },
  {
    "current": 5,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 6,
    "isKeyWord": false,
    "tex": "c",
    "type": "StringLiteral",
    "value": "c",
  },
  {
    "current": 7,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 8,
    "isKeyWord": false,
    "tex": "d",
    "type": "StringLiteral",
    "value": "d",
  },
  {
    "current": 9,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 10,
    "isKeyWord": false,
    "tex": "e",
    "type": "StringLiteral",
    "value": "e",
  },
  {
    "current": 11,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 12,
    "isKeyWord": false,
    "tex": "f",
    "type": "StringLiteral",
    "value": "f",
  },
  {
    "current": 13,
    "isKeyWord": true,
    "tex": "\\\\rbrace",
    "type": "RParen",
    "value": "}",
  },
]
`;

exports[`asciimath matrix > should tokenize a recursive matrix 1`] = `
[
  {
    "current": 1,
    "isKeyWord": true,
    "tex": "[",
    "type": "LParen",
    "value": "[",
  },
  {
    "current": 2,
    "isKeyWord": true,
    "tex": "[",
    "type": "LParen",
    "value": "[",
  },
  {
    "current": 3,
    "isKeyWord": false,
    "tex": "a",
    "type": "StringLiteral",
    "value": "a",
  },
  {
    "current": 4,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 5,
    "isKeyWord": false,
    "tex": "b",
    "type": "StringLiteral",
    "value": "b",
  },
  {
    "current": 6,
    "isKeyWord": true,
    "tex": "]",
    "type": "RParen",
    "value": "]",
  },
  {
    "current": 7,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 8,
    "isKeyWord": false,
    "tex": "c",
    "type": "StringLiteral",
    "value": "c",
  },
  {
    "current": 9,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 10,
    "isKeyWord": false,
    "tex": "d",
    "type": "StringLiteral",
    "value": "d",
  },
  {
    "current": 11,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 12,
    "isKeyWord": false,
    "tex": "e",
    "type": "StringLiteral",
    "value": "e",
  },
  {
    "current": 14,
    "isKeyWord": true,
    "tex": ".",
    "type": "RParen",
    "value": ":}",
  },
]
`;

exports[`asciimath matrix > should tokenize cases 1`] = `
[
  {
    "current": 1,
    "isKeyWord": false,
    "tex": "f",
    "type": "StringLiteral",
    "value": "f",
  },
  {
    "current": 2,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 3,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 4,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
  {
    "current": 5,
    "isKeyWord": false,
    "tex": "=",
    "type": "StringLiteral",
    "value": "=",
  },
  {
    "current": 6,
    "isKeyWord": true,
    "tex": "\\\\lbrace",
    "type": "LParen",
    "value": "{",
  },
  {
    "current": 7,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 8,
    "isKeyWord": true,
    "tex": "^{ $1 }",
    "type": "OperatorSup",
    "value": "^",
  },
  {
    "current": 9,
    "isKeyWord": false,
    "tex": "2",
    "type": "NumberLiteral",
    "value": "2",
  },
  {
    "current": 10,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 12,
    "isKeyWord": true,
    "tex": "if\\\\quad",
    "type": "Text",
    "value": "if",
  },
  {
    "current": 14,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 15,
    "isKeyWord": false,
    "tex": ">",
    "type": "StringLiteral",
    "value": ">",
  },
  {
    "current": 16,
    "isKeyWord": false,
    "tex": "0",
    "type": "NumberLiteral",
    "value": "0",
  },
  {
    "current": 17,
    "isKeyWord": true,
    "tex": ";",
    "type": "Split",
    "value": ";",
  },
  {
    "current": 18,
    "isKeyWord": false,
    "tex": "x",
    "type": "StringLiteral",
    "value": "x",
  },
  {
    "current": 19,
    "isKeyWord": true,
    "tex": ",",
    "type": "Split",
    "value": ",",
  },
  {
    "current": 29,
    "isKeyWord": true,
    "tex": "otherwise\\\\quad",
    "type": "Text",
    "value": "otherwise",
  },
  {
    "current": 31,
    "isKeyWord": true,
    "tex": ".",
    "type": "RParen",
    "value": ":}",
  },
]
`;

exports[`tokenize color > should tokenize color 1`] = `
[
  {
    "current": 5,
    "isKeyWord": true,
    "tex": "{ \\\\color{$1} $2 }",
    "type": "OperatorOAB",
    "value": "color",
  },
  {
    "current": 11,
    "isKeyWord": false,
    "tex": "pink",
    "type": "Const",
    "value": "pink",
  },
  {
    "current": 12,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 15,
    "isKeyWord": false,
    "tex": "123",
    "type": "NumberLiteral",
    "value": "123",
  },
  {
    "current": 16,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
]
`;

exports[`tokenize color > should tokenize rgb color 1`] = `
[
  {
    "current": 5,
    "isKeyWord": true,
    "tex": "{ \\\\color{$1} $2 }",
    "type": "OperatorOAB",
    "value": "color",
  },
  {
    "current": 14,
    "isKeyWord": false,
    "tex": "#114514",
    "type": "Const",
    "value": "#114514",
  },
  {
    "current": 15,
    "isKeyWord": true,
    "tex": "(",
    "type": "LParen",
    "value": "(",
  },
  {
    "current": 18,
    "isKeyWord": false,
    "tex": "123",
    "type": "NumberLiteral",
    "value": "123",
  },
  {
    "current": 19,
    "isKeyWord": true,
    "tex": ")",
    "type": "RParen",
    "value": ")",
  },
]
`;

exports[`trie success > should build trie 1`] = `
Trie {
  "_char_to_index": Map {
    "a" => 0,
    "b" => 1,
    "c" => 2,
    "d" => 3,
    "e" => 4,
    "f" => 5,
    "g" => 6,
    "h" => 7,
    "i" => 8,
    "j" => 9,
    "k" => 10,
    "l" => 11,
    "m" => 12,
    "n" => 13,
    "o" => 14,
    "p" => 15,
    "q" => 16,
    "r" => 17,
    "s" => 18,
    "t" => 19,
    "u" => 20,
    "v" => 21,
    "w" => 22,
    "x" => 23,
    "y" => 24,
    "z" => 25,
    " " => 26,
  },
  "_n": 27,
  "_root": TrieNode {
    "_end": false,
    "_nextNode": [
      TrieNode {
        "_end": false,
        "_nextNode": [
          null,
          TrieNode {
            "_end": false,
            "_nextNode": [
              null,
              null,
              TrieNode {
                "_end": true,
                "_nextNode": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                ],
              },
              TrieNode {
                "_end": false,
                "_nextNode": [
                  TrieNode {
                    "_end": true,
                    "_nextNode": [
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                    ],
                  },
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                ],
              },
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
            ],
          },
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
        ],
      },
      TrieNode {
        "_end": false,
        "_nextNode": [
          TrieNode {
            "_end": false,
            "_nextNode": [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              TrieNode {
                "_end": true,
                "_nextNode": [
                  TrieNode {
                    "_end": false,
                    "_nextNode": [
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      TrieNode {
                        "_end": false,
                        "_nextNode": [
                          TrieNode {
                            "_end": true,
                            "_nextNode": [
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                              null,
                            ],
                          },
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                          null,
                        ],
                      },
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                    ],
                  },
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                ],
              },
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
            ],
          },
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
        ],
      },
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    ],
  },
}
`;
